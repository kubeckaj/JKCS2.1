#!/bin/bash

FROM=0.0
TO=10.0
Qfromto=0
Qflatfit=0
Qflatten=-1
Qtemp=298.15
SKIP=0 #those are steps
UPTO=0 # those are steps
MULTIPLIER=1
BINS=0.02 #Width of bins in Angstrom
FOLDER="umbrella_integration"
QonlyQC=0
versions=""

scriptpath="$( cd "$(dirname "$0")" ; pwd -P )"
toolspath="$scriptpath/../"


arguments=("$@")       # arguments of this script
arguments_help=()      # 
arguments_help_pass=() # arguments which are passed if all arguments are passed

function print_help(){
  echo """JKumbrelalintegration [OPTIONS]
  - you should run this in the folder that contains commands_TODO.txt and calc-LM_X_Y subfolders

  OPTIONS:
    -help ...................... print help
    -skip <int> ................ number of simulation steps to skip [default 0]
    -upto <int> ................ number of max simulatiom steps to take [default infinity]
    -range <float> <float> ..... range of simulation in Angstrom; ONLY FOR GRAPHICAL VISUALIZATION
    -bins <float> .............. width of the bins in Angstrom [default 0.02]
    -multiplier <int> .......... 1 or 2 for the same molecules [default 1]
    -symm ...................... = multiplier 2
    -temp ...................... temperature in K [default 298.15]
    -folder <string> ........... folder name [default umbrella_integration]
    -versions <string of ints> . list of versions to take into account [default all]
    -flatfit ................... finds dept by fitting to a flat part, otherwise Morse is used
    -flatten <float> ........... flattens PMF from 0 to <float> with PMF(<float>) value
    -exploded <float> <float> .. removes emploded structures with radius greater the values
    OTHERS: -qc

  EXAMPLES:
    JKumbrellaintegration
    JKumbrellaintegration -skip 10000 -range 3.4 10.0 -bins 0.01 -multiplier 2
    JKumbrellaintegration -skip 100000 -upto 200000 -versions \"1 2 3 4 5\" -folder UI_100k-200k_v1-5
    sbatch -p q64 --time=1:00:00 JKsend JKumbrellaintegration"""
  exit
}

last=""
EXPLODED=0
for i in "${!arguments[@]}"
do
  iter="${arguments[$i]}"
  # select
  if [ "$iter" == "-help" ]
  then
    print_help
    exit
  fi
  if [ "$iter" == "-range" ]
  then
    last="-range"
    continue
  fi
  if [ "$last" == "-range" ]
  then
    FROM=$iter
    last="-range2"
    continue
  fi
  if [ "$last" == "-range2" ]
  then
    TO=$iter
    Qfromto=1
    last=""
    continue
  fi
  if [ "$iter" == "-qc" ]
  then
    QonlyQC=1
    continue
  fi
  if [ "$iter" == "-exploded" ]
  then
    last="-exploded"
    EXPLODED=1
    continue
  fi
  if [ "$last" == "-exploded" ]
  then
    last=""
    EXPLODED1=$iter
    last="-exploded2"
    continue
  fi
  if [ "$last" == "-exploded2" ]
  then
    last=""
    EXPLODED2=$iter
    continue
  fi
  if [ "$iter" == "-bins" ]
  then
    last="-bins"
    continue
  fi
  if [ "$last" == "-bins" ]
  then
    last=""
    BINS=$iter
    continue
  fi
  if [ "$iter" == "-skip" ]
  then
    last="-skip"
    continue
  fi
  if [ "$last" == "-skip" ]
  then
    last=""
    SKIP=$iter
    continue
  fi
  if [ "$iter" == "-symm" ]
  then
    MULTIPLIER=2
    continue
  fi 
  if [ "$iter" == "-multiplier" ]
  then
    last="-multiplier"
    continue
  fi
  if [ "$last" == "-multiplier" ]
  then
    last=""
    MULTIPLIER=$iter
    continue
  fi
  if [ "$iter" == "-upto" ]
  then
    last="-upto"
    continue
  fi
  if [ "$last" == "-upto" ]
  then
    last=""
    UPTO=$iter
    continue
  fi
  if [ "$iter" == "-folder" ] || [ "$iter" == "-f" ] || [ "$iter" == "-nf" ]
  then
    last="-folder"
    continue
  fi
  if [ "$last" == "-folder" ]
  then
    last=""
    FOLDER=$iter
    continue
  fi
  if [ "$iter" == "-versions" ] || [ "$iter" == "-version" ]
  then
    last="-versions"
    continue
  fi
  if [ "$last" == "-versions" ]
  then
    last=""
    versions="$iter"
    continue
  fi
  if [ "$iter" == "-flatfit" ]
  then
    Qflatfit=1
    continue
  fi
  if [ "$iter" == "-flatten" ]
  then
    last="-flatten"
    continue
  fi
  if [ "$last" == "-flatten" ]
  then
    last=""
    Qflatten=$iter
    continue
  fi
  if [ "$iter" == "-temp" ]
  then
    last="-temp"
    continue
  fi
  if [ "$last" == "-temp" ]
  then
    last=""
    Qtemp=$iter
    continue
  fi
  echo "I do not understand this: $iter"
  exit
done

source ~/.JKCSusersetup.txt

currentdir=$PWD
if [ ! -e ~/Applications ]
then
  mkdir ~/Applications
fi
if [ ! -e ~/Applications/umbrella_integration ]
then
  cd ~/Applications
  git clone https://github.com/ATB-UQ/umbrella_integration.git
  cd $currentdir
fi

if [ ! -e input.txt ];
then
  if [ ! -e $FOLDER ]; then mkdir $FOLDER; fi
  cd $FOLDER
  if [ -e input.txt ]; then rm input.txt; fi
  distances=`ls -d ../calc-LM_* | xargs -n 1 | sed 's/_/ /' | sed 's/_v/ /' | awk '{print $2}' | sort -un | xargs`
  if [ -z "$versions" ]
  then
    versions=`ls -d ../calc-LM_* | xargs -n 1 | sed 's/_/ /' | sed 's/_v/ /' | awk '{print $3}' | sort -un | xargs`
    if [ -z "$versions" ]
    then
      versions="just_one_version"
      ver=""
    else 
      ver="_v"
    fi
  else
    ver="_v"
  fi
  k_bias=`tail -n 1 ../commands_TODO.txt | grep -oP '(?<="-k_bias" )\w+'`
  if [ -z "$k_bias" ]; then k_bias=100; fi
  for distance in $distances
  do
  for version in $versions
  do
    if [ -z "$ver" ]; then veradd=""; else veradd="$ver${version}"; fi
    if [ ! -e ../calc-LM_${distance}${veradd} ]; then continue; fi
    if [   -e ../calc-LM_${distance}${veradd}/error.pkl ]; then continue; fi
    if [ ! -e ../calc-LM_${distance}${veradd}/output ]; then continue; fi
    filter_command="grep 'JKMD:' ../calc-LM_${distance}${veradd}/output"
    if [ $SKIP -gt 0 ]; then filter_command+=" | awk '\$2 >= $SKIP'"; fi
    if [ $UPTO -gt 0 ]; then filter_command+=" | awk '\$2 <= $UPTO'"; fi
    test_above=`eval "$filter_command" | sort -nk  14 | tail -n 1 | awk '{print $14}'`
    test_below=`eval "$filter_command" | sort -nrk 14 | tail -n 1 | awk '{print $14}'`
    #echo "$test_above $test_below"
    test_above=`echo "$test_above-1.0*$distance>10.0" | bc -l`
    test_below=`echo "$test_below-1.0*$distance<-10.0" | bc -l`
    #echo "$test_above $test_below"
    if [ $test_above -gt 0 ] || [ $test_below -gt 0 ]; then echo "1 simulation skipped (${distance}${veradd})"; continue; fi
    command="grep 'JKMD:' ../calc-LM_${distance}${veradd}/output"
    if [ $SKIP -gt 0 ]; then command+=" | awk '\$2 >= $SKIP'"; fi
    if [ $UPTO -gt 0 ]; then command+=" | awk '\$2 <= $UPTO'"; fi
    if [ $EXPLODED -gt 0 ]; then command+=" | awk '\$15 <= $EXPLODED1'"; fi
    if [ $EXPLODED -gt 0 ]; then command+=" | awk '\$16 <= $EXPLODED2'"; fi
    #command+=" | awk -v d=$distance -v kbias=$k_bias '{printf(\"%s %s %s %.2f\n\",\$3,\$14,d,kbias*4.184)}' | grep -v nan | column -t >> input.txt"
    command+=" | awk -v d=$distance -v kbias=$k_bias '{printf(\"%s %s %s %.2f %.2f\n\",\$3,\$14,d,kbias*4.184,\$9)}' | grep -v nan | column -t >> input.txt"
    eval $command
  done
  done
  
  #JKQC ../simcalc-LM_*.pkl  -column log md_time -column log COM_distance -column log harm_distance -column log k_bias -noex -filter_gt log,md_step $SKIP | awk '{print $1 " " $2 " " $3 " " $4*4.184}' | grep -v nan | column -t >> input.txt
fi

if [ $Qfromto == 0 ]; then FROM=`cat input.txt | awk '{print $3}' | sort -n | head -n 1`; fi
if [ $Qfromto == 0 ]; then TO=`cat input.txt | awk '{print $3}' | sort -n | tail -n 1`; fi
echo "Integrating from $FROM to $TO"

#MASSES
if [ -e ../commands_TODO.txt ]; 
then
  files="`head -n 1 ../commands_TODO.txt | xargs -n 1 | grep .pkl | grep -v "model.pkl"` `head -n 1 ../commands_TODO.txt | xargs -n 1 | grep ".xyz"`"
  echo $files
  lenfiles=`echo $files | wc -w`
  if [ $lenfiles == 2 ]; 
  then 
    file=`echo $files | awk '{print $1}'`
    m1=`JKQC $file -index 0 -mass -noex`
    file=`echo $files | awk '{print $2}'`
    m2=`JKQC $file -index 0 -mass -noex`
  else
    echo "the QC correction will be wrong"
  fi
else
  echo "the QC correction will not be performed"
fi

module load python/2.7.14
#python2.7 /home/kubeckaj/Applications/umbrella_integration/umbrella_integration.py -i input.txt -t 298.15 -b 0.01 -pp pic1 -ph pic2 -o out -m $FROM $TO
#TODO -nb 1
if [ $QonlyQC -eq 0 ];
then
  python2.7 /home/kubeckaj/Applications/umbrella_integration/umbrella_integration.py -i input.txt -t $Qtemp -b $BINS -o out -m $FROM $TO -ph Histograms >> output 2>&1
fi
if [ -e out ]; 
then
  echo program_PYTHON $toolspath/SCRIPTS/JKumbrella_integration.py $MULTIPLIER $Qflatfit $m1 $m2 $Qtemp >> output
  program_PYTHON $toolspath/SCRIPTS/JKumbrella_integration.py $MULTIPLIER $Qflatfit $Qflatten $m1 $m2 $Qtemp >> output 2>&1
fi
cd ..
